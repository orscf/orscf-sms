using System;
using System.ComponentModel.DataAnnotations;
using System.Collections.ObjectModel;
using System.Linq.Expressions;
using MedicalResearch.StudyManagement.Model;

namespace MedicalResearch.StudyManagement.Persistence {

  [PrimaryIdentity(nameof(Url))]
  [PropertyGroup(nameof(Url), nameof(Url))]
  [PropertyGroup("Search", nameof(Label), nameof(Url))]
  [PropertyGroup(nameof(OwnerInstituteUid), nameof(OwnerInstituteUid))]
  [HasLookup("", nameof(OwnerInstituteUid), "", null, nameof(InstituteEntity))]
  public class DataEndpointEntity {

    [Required]
    public String Url { get; set; }

    [Required, IdentityLabel]
    public String Label { get; set; }

    [Required]
    public Guid OwnerInstituteUid { get; set; }

    [Required]
    public Boolean PublicResolvable { get; set; }

    /// <summary> SDR | WDR | IMS | VDR | BDR | <CustomName> </summary>
    [Required]
    public String EndpointType { get; set; }

    [Required]
    public String OAuthUrl { get; set; }

    [Lookup]
    public virtual InstituteEntity OwnerInstitute { get; set; }

    #region Mapping

    internal static Expression<Func<DataEndpoint, DataEndpointEntity>> DataEndpointEntitySelector = ((DataEndpoint src) => new DataEndpointEntity {
      Url = src.Url,
      Label = src.Label,
      OwnerInstituteUid = src.OwnerInstituteUid,
      PublicResolvable = src.PublicResolvable,
      EndpointType = src.EndpointType,
      OAuthUrl = src.OAuthUrl,
    });

    internal static Expression<Func<DataEndpointEntity, DataEndpoint>> DataEndpointSelector = ((DataEndpointEntity src) => new DataEndpoint {
      Url = src.Url,
      Label = src.Label,
      OwnerInstituteUid = src.OwnerInstituteUid,
      PublicResolvable = src.PublicResolvable,
      EndpointType = src.EndpointType,
      OAuthUrl = src.OAuthUrl,
    });

    internal void CopyContentFrom(DataEndpoint source, Func<String, bool> onFixedValueChangingCallback = null) {
      this.Url = source.Url;
      this.Label = source.Label;
      this.OwnerInstituteUid = source.OwnerInstituteUid;
      this.PublicResolvable = source.PublicResolvable;
      this.EndpointType = source.EndpointType;
      this.OAuthUrl = source.OAuthUrl;
    }

    internal void CopyContentTo(DataEndpoint target, Func<String, bool> onFixedValueChangingCallback = null) {
      target.Url = this.Url;
      target.Label = this.Label;
      target.OwnerInstituteUid = this.OwnerInstituteUid;
      target.PublicResolvable = this.PublicResolvable;
      target.EndpointType = this.EndpointType;
      target.OAuthUrl = this.OAuthUrl;
    }

    #endregion

  }

  [PrimaryIdentity(nameof(InstituteUid))]
  [PropertyGroup(nameof(InstituteUid), nameof(InstituteUid))]
  [PropertyGroup("Search", nameof(DisplayLabel))]
  public class InstituteEntity {

    /// <summary> An <see href="https://de.wikipedia.org/wiki/Universally_Unique_Identifier">Universally Unique Identifier</see> which can be generated by any origin system and is used to address this ORSCF conform data record in decentralized environments. Note that this Identity must not be changed any more! </summary>
    [Required]
    public Guid InstituteUid { get; set; } = Guid.NewGuid();

    /// <summary> An DisplayLabel which is dedicated for the usage within the frontend of study managent software. Note that this short name representation hat the caracter of an internal shortcurt and could be ambiguous. The usage for legal-relevant/official communication or documents is not recommended, as well as the usage for technical identification of this record. *this field has a max length of 100 </summary>
    [MaxLength(100), Required, IdentityLabel]
    public String DisplayLabel { get; set; }

    [Required]
    public Boolean IsArchived { get; set; }

    /// <summary> *this field is optional (use null as value) </summary>
    public String PrivateSdrUrl { get; set; }

    /// <summary> *this field is optional (use null as value) </summary>
    public String PrivateWdrUrl { get; set; }

    /// <summary> *this field is optional (use null as value) </summary>
    public String PrivateVdrUrl { get; set; }

    /// <summary> *this field is optional (use null as value) </summary>
    public String PrivateBdrUrl { get; set; }

    [Referrer]
    public virtual ObservableCollection<DataEndpointEntity> OwnedDataEndpoints { get; set; } = new ObservableCollection<DataEndpointEntity>();

    [Referrer]
    public virtual ObservableCollection<InstitueRelatedOAuthConfigEntity> OAuthConfigs { get; set; } = new ObservableCollection<InstitueRelatedOAuthConfigEntity>();

    [Referrer]
    public virtual ObservableCollection<ResearchStudyEntity> InitiatedStudies { get; set; } = new ObservableCollection<ResearchStudyEntity>();

    [Referrer]
    public virtual ObservableCollection<SiteEntity> RepresentedSites { get; set; } = new ObservableCollection<SiteEntity>();

    #region Mapping

    internal static Expression<Func<Institute, InstituteEntity>> InstituteEntitySelector = ((Institute src) => new InstituteEntity {
      InstituteUid = src.InstituteUid,
      DisplayLabel = src.DisplayLabel,
      IsArchived = src.IsArchived,
      PrivateSdrUrl = src.PrivateSdrUrl,
      PrivateWdrUrl = src.PrivateWdrUrl,
      PrivateVdrUrl = src.PrivateVdrUrl,
      PrivateBdrUrl = src.PrivateBdrUrl,
    });

    internal static Expression<Func<InstituteEntity, Institute>> InstituteSelector = ((InstituteEntity src) => new Institute {
      InstituteUid = src.InstituteUid,
      DisplayLabel = src.DisplayLabel,
      IsArchived = src.IsArchived,
      PrivateSdrUrl = src.PrivateSdrUrl,
      PrivateWdrUrl = src.PrivateWdrUrl,
      PrivateVdrUrl = src.PrivateVdrUrl,
      PrivateBdrUrl = src.PrivateBdrUrl,
    });

    internal void CopyContentFrom(Institute source, Func<String, bool> onFixedValueChangingCallback = null) {
      this.InstituteUid = source.InstituteUid;
      this.DisplayLabel = source.DisplayLabel;
      this.IsArchived = source.IsArchived;
      this.PrivateSdrUrl = source.PrivateSdrUrl;
      this.PrivateWdrUrl = source.PrivateWdrUrl;
      this.PrivateVdrUrl = source.PrivateVdrUrl;
      this.PrivateBdrUrl = source.PrivateBdrUrl;
    }

    internal void CopyContentTo(Institute target, Func<String, bool> onFixedValueChangingCallback = null) {
      target.InstituteUid = this.InstituteUid;
      target.DisplayLabel = this.DisplayLabel;
      target.IsArchived = this.IsArchived;
      target.PrivateSdrUrl = this.PrivateSdrUrl;
      target.PrivateWdrUrl = this.PrivateWdrUrl;
      target.PrivateVdrUrl = this.PrivateVdrUrl;
      target.PrivateBdrUrl = this.PrivateBdrUrl;
    }

    #endregion

  }

  public class InstitueRelatedOAuthConfigEntity {

    [Required]
    public Guid InstituteUid { get; set; } = Guid.NewGuid();

    [Required]
    public String DataEndpointUrl { get; set; }

    [Required]
    public String OAuthClientId { get; set; }

    [Required]
    public String OAuthClientSecret { get; set; }

    [Required]
    public String OAuthScopesRequired { get; set; }

    [Lookup]
    public virtual InstituteEntity ForInstitute { get; set; }

    [Lookup]
    public virtual DataEndpointEntity ForEndpoint { get; set; }

    #region Mapping

    internal static Expression<Func<InstitueRelatedOAuthConfig, InstitueRelatedOAuthConfigEntity>> InstitueRelatedOAuthConfigEntitySelector = ((InstitueRelatedOAuthConfig src) => new InstitueRelatedOAuthConfigEntity {
      InstituteUid = src.InstituteUid,
      DataEndpointUrl = src.DataEndpointUrl,
      OAuthClientId = src.OAuthClientId,
      OAuthClientSecret = src.OAuthClientSecret,
      OAuthScopesRequired = src.OAuthScopesRequired,
    });

    internal static Expression<Func<InstitueRelatedOAuthConfigEntity, InstitueRelatedOAuthConfig>> InstitueRelatedOAuthConfigSelector = ((InstitueRelatedOAuthConfigEntity src) => new InstitueRelatedOAuthConfig {
      InstituteUid = src.InstituteUid,
      DataEndpointUrl = src.DataEndpointUrl,
      OAuthClientId = src.OAuthClientId,
      OAuthClientSecret = src.OAuthClientSecret,
      OAuthScopesRequired = src.OAuthScopesRequired,
    });

    internal void CopyContentFrom(InstitueRelatedOAuthConfig source, Func<String, bool> onFixedValueChangingCallback = null) {
      this.InstituteUid = source.InstituteUid;
      this.DataEndpointUrl = source.DataEndpointUrl;
      this.OAuthClientId = source.OAuthClientId;
      this.OAuthClientSecret = source.OAuthClientSecret;
      this.OAuthScopesRequired = source.OAuthScopesRequired;
    }

    internal void CopyContentTo(InstitueRelatedOAuthConfig target, Func<String, bool> onFixedValueChangingCallback = null) {
      target.InstituteUid = this.InstituteUid;
      target.DataEndpointUrl = this.DataEndpointUrl;
      target.OAuthClientId = this.OAuthClientId;
      target.OAuthClientSecret = this.OAuthClientSecret;
      target.OAuthScopesRequired = this.OAuthScopesRequired;
    }

    #endregion

  }

  /// <summary> entity, which relates to <see href="https://www.hl7.org/fhir/researchstudy.html">HL7.ResearchStudy</see> </summary>
  [PrimaryIdentity(nameof(ResearchStudyUid))]
  [PropertyGroup(nameof(ResearchStudyUid), nameof(ResearchStudyUid))]
  [PropertyGroup("Search", nameof(DisplayLabel), nameof(StudyWorkflowName))]
  [PropertyGroup(nameof(InitiatorInstituteUid), nameof(InitiatorInstituteUid))]
  [HasLookup("", nameof(InitiatorInstituteUid), "", null, nameof(InstituteEntity))]
  public class ResearchStudyEntity {

    /// <summary> An <see href="https://de.wikipedia.org/wiki/Universally_Unique_Identifier">Universally Unique Identifier</see> which can be generated by any origin system and is used to address this ORSCF conform data record in decentralized environments. Note that this Identity must not be changed any more! </summary>
    [Required]
    public Guid ResearchStudyUid { get; set; } = Guid.NewGuid();

    /// <summary> An DisplayLabel which is dedicated for the usage within the frontend of study managent software. Note that this short name representation hat the caracter of an internal shortcurt and could be ambiguous. The usage for legal-relevant/official communication or documents is not recommended, as well as the usage for technical identification of this record. *this field has a max length of 100 </summary>
    [MaxLength(100), Required, IdentityLabel]
    public String DisplayLabel { get; set; }

    [Required]
    public Guid InitiatorInstituteUid { get; set; }

    [Required]
    public String StudyWorkflowName { get; set; }

    [Required]
    public String StudyWorkflowVersion { get; set; }

    /// <summary> AS DECLARED BY <see href="https://www.hl7.org/fhir/valueset-research-study-phase.html">HL7.ResearchStudyPhase</see>:
    /// n-a | early-phase-1 | phase-1 | phase-1-phase-2 | phase-2 | phase-2-phase-3 | phase-3 | phase-4 *this field is optional (use null as value) </summary>
    public String Phase { get; set; }

    /// <summary> a estimated date in future is possible *this field is optional </summary>
    public Nullable<DateTime> StartDate { get; set; }

    /// <summary> a estimated date in future is possible *this field is optional </summary>
    public Nullable<DateTime> TerminationDate { get; set; }

    /// <summary> A title which informs about the sematic of the SubjectIdentifer (which concrete value is used): "Randomization-Number", "Screening-Number", ... </summary>
    [Required]
    public String SubjectIdentifierTitle { get; set; }

    /// <summary> AS DECLARED BY <see href="https://www.hl7.org/fhir/valueset-research-study-status.html">HL7.ResearchStudyStatus</see>:
    /// active | administratively-completed | approved | closed-to-accrual | closed-to-accrual-and-intervention | completed | disapproved | in-review | temporarily-closed-to-accrual | temporarily-closed-to-accrual-and-intervention | withdrawn </summary>
    [Required]
    public String Status { get; set; }

    /// <summary> *this field is optional (use null as value) </summary>
    public String TerminatedReason { get; set; }

    [Required]
    public Boolean IsArchived { get; set; }

    /// <summary> *this field is optional (use null as value) </summary>
    public String InitiatorRelatedProjectNumber { get; set; }

    /// <summary> usually provided by the Sponsor *this field is optional (use null as value) </summary>
    public String SdrUrl { get; set; }

    /// <summary> usually provided by the Sponsor *this field is optional (use null as value) </summary>
    public String ImsUrl { get; set; }

    /// <summary> usually provided by the Sponsor *this field is optional (use null as value) </summary>
    public String WdrUrl { get; set; }

    /// <summary> usually provided by the Sponsor *this field is optional (use null as value) </summary>
    public String VdrUrl { get; set; }

    /// <summary> usually provided by the Sponsor *this field is optional (use null as value) </summary>
    public String BdrUrl { get; set; }

    [Lookup]
    public virtual InstituteEntity InitiatorInstitute { get; set; }

    [Dependent]
    public virtual ObservableCollection<InvolvementRoleEntity> InvolvementRoles { get; set; } = new ObservableCollection<InvolvementRoleEntity>();

    [Dependent]
    public virtual ObservableCollection<SiteEntity> Sites { get; set; } = new ObservableCollection<SiteEntity>();

    #region Mapping

    internal static Expression<Func<ResearchStudy, ResearchStudyEntity>> ResearchStudyEntitySelector = ((ResearchStudy src) => new ResearchStudyEntity {
      ResearchStudyUid = src.ResearchStudyUid,
      DisplayLabel = src.DisplayLabel,
      InitiatorInstituteUid = src.InitiatorInstituteUid,
      StudyWorkflowName = src.StudyWorkflowName,
      StudyWorkflowVersion = src.StudyWorkflowVersion,
      Phase = src.Phase,
      StartDate = src.StartDate,
      TerminationDate = src.TerminationDate,
      SubjectIdentifierTitle = src.SubjectIdentifierTitle,
      Status = src.Status,
      TerminatedReason = src.TerminatedReason,
      IsArchived = src.IsArchived,
      InitiatorRelatedProjectNumber = src.InitiatorRelatedProjectNumber,
      SdrUrl = src.SdrUrl,
      ImsUrl = src.ImsUrl,
      WdrUrl = src.WdrUrl,
      VdrUrl = src.VdrUrl,
      BdrUrl = src.BdrUrl,
    });

    internal static Expression<Func<ResearchStudyEntity, ResearchStudy>> ResearchStudySelector = ((ResearchStudyEntity src) => new ResearchStudy {
      ResearchStudyUid = src.ResearchStudyUid,
      DisplayLabel = src.DisplayLabel,
      InitiatorInstituteUid = src.InitiatorInstituteUid,
      StudyWorkflowName = src.StudyWorkflowName,
      StudyWorkflowVersion = src.StudyWorkflowVersion,
      Phase = src.Phase,
      StartDate = src.StartDate,
      TerminationDate = src.TerminationDate,
      SubjectIdentifierTitle = src.SubjectIdentifierTitle,
      Status = src.Status,
      TerminatedReason = src.TerminatedReason,
      IsArchived = src.IsArchived,
      InitiatorRelatedProjectNumber = src.InitiatorRelatedProjectNumber,
      SdrUrl = src.SdrUrl,
      ImsUrl = src.ImsUrl,
      WdrUrl = src.WdrUrl,
      VdrUrl = src.VdrUrl,
      BdrUrl = src.BdrUrl,
    });

    internal void CopyContentFrom(ResearchStudy source, Func<String, bool> onFixedValueChangingCallback = null) {
      this.ResearchStudyUid = source.ResearchStudyUid;
      this.DisplayLabel = source.DisplayLabel;
      this.InitiatorInstituteUid = source.InitiatorInstituteUid;
      this.StudyWorkflowName = source.StudyWorkflowName;
      this.StudyWorkflowVersion = source.StudyWorkflowVersion;
      this.Phase = source.Phase;
      this.StartDate = source.StartDate;
      this.TerminationDate = source.TerminationDate;
      this.SubjectIdentifierTitle = source.SubjectIdentifierTitle;
      this.Status = source.Status;
      this.TerminatedReason = source.TerminatedReason;
      this.IsArchived = source.IsArchived;
      this.InitiatorRelatedProjectNumber = source.InitiatorRelatedProjectNumber;
      this.SdrUrl = source.SdrUrl;
      this.ImsUrl = source.ImsUrl;
      this.WdrUrl = source.WdrUrl;
      this.VdrUrl = source.VdrUrl;
      this.BdrUrl = source.BdrUrl;
    }

    internal void CopyContentTo(ResearchStudy target, Func<String, bool> onFixedValueChangingCallback = null) {
      target.ResearchStudyUid = this.ResearchStudyUid;
      target.DisplayLabel = this.DisplayLabel;
      target.InitiatorInstituteUid = this.InitiatorInstituteUid;
      target.StudyWorkflowName = this.StudyWorkflowName;
      target.StudyWorkflowVersion = this.StudyWorkflowVersion;
      target.Phase = this.Phase;
      target.StartDate = this.StartDate;
      target.TerminationDate = this.TerminationDate;
      target.SubjectIdentifierTitle = this.SubjectIdentifierTitle;
      target.Status = this.Status;
      target.TerminatedReason = this.TerminatedReason;
      target.IsArchived = this.IsArchived;
      target.InitiatorRelatedProjectNumber = this.InitiatorRelatedProjectNumber;
      target.SdrUrl = this.SdrUrl;
      target.ImsUrl = this.ImsUrl;
      target.WdrUrl = this.WdrUrl;
      target.VdrUrl = this.VdrUrl;
      target.BdrUrl = this.BdrUrl;
    }

    #endregion

  }

  [HasPrincipal("", nameof(RepresentingInstituteUid), "", null, nameof(InstituteEntity))]
  [PropertyGroup(nameof(RepresentingInstituteUid), nameof(RepresentingInstituteUid))]
  [PropertyGroup("Search", nameof(DisplayLabel), nameof(StudyRelatedSiteIdentifer))]
  [PropertyGroup(nameof(ResearchStudyUid), nameof(ResearchStudyUid))]
  [HasLookup("", nameof(ResearchStudyUid), "", null, nameof(ResearchStudyEntity))]
  public class SiteEntity {

    /// <summary> An <see href="https://de.wikipedia.org/wiki/Universally_Unique_Identifier">Universally Unique Identifier</see> which can be generated by any origin system and is used to address this ORSCF conform data record in decentralized environments. Note that this Identity must not be changed any more! </summary>
    [Required]
    public Guid SiteUid { get; set; } = Guid.NewGuid();

    /// <summary> <see href="https://de.wikipedia.org/wiki/Universally_Unique_Identifier">Universally Unique Identifier</see> of the institute, which is representing this site </summary>
    [Required]
    public Guid RepresentingInstituteUid { get; set; }

    /// <summary> <see href="https://de.wikipedia.org/wiki/Universally_Unique_Identifier">Universally Unique Identifier</see> of the related record </summary>
    [Required]
    public Guid ResearchStudyUid { get; set; }

    /// <summary> a estimated date in future is possible *this field is optional </summary>
    public Nullable<DateTime> EnrollmentDate { get; set; }

    /// <summary> a estimated date in future is possible *this field is optional </summary>
    public Nullable<DateTime> TerminationDate { get; set; }

    /// <summary> *this field is optional (use null as value) </summary>
    public String TerminatedReason { get; set; }

    /// <summary> Offical 'SiteIdentifier' which is unique within the scope of the related study </summary>
    [Required]
    public String StudyRelatedSiteIdentifer { get; set; }

    /// <summary> An DisplayLabel which is dedicated for the usage within the frontend of study managent software. Note that this short name representation hat the caracter of an internal shortcurt and could be ambiguous. The usage for legal-relevant/official communication or documents is not recommended, as well as the usage for technical identification of this record. </summary>
    [Required, IdentityLabel]
    public String DisplayLabel { get; set; }

    /// <summary> AS DECLARED BY HL7 </summary>
    [Required]
    public String Status { get; set; }

    /// <summary> *this field is optional (use null as value) </summary>
    public String SiteRelatedProjectNumber { get; set; }

    /// <summary> *this field is optional (use null as value) </summary>
    public String DedicatedSdrUrl { get; set; }

    /// <summary> *this field is optional (use null as value) </summary>
    public String DedicatedVdrUrl { get; set; }

    /// <summary> *this field is optional (use null as value) </summary>
    public String DedicatedBdrUrl { get; set; }

    [Lookup]
    public virtual InstituteEntity RepresentingInstitute { get; set; }

    [Referrer]
    public virtual ObservableCollection<InvolvementRoleEntity> SiteDedicatedInvolvementRoles { get; set; } = new ObservableCollection<InvolvementRoleEntity>();

    [Principal]
    public virtual ResearchStudyEntity Study { get; set; }

    #region Mapping

    internal static Expression<Func<Site, SiteEntity>> SiteEntitySelector = ((Site src) => new SiteEntity {
      SiteUid = src.SiteUid,
      RepresentingInstituteUid = src.RepresentingInstituteUid,
      ResearchStudyUid = src.ResearchStudyUid,
      EnrollmentDate = src.EnrollmentDate,
      TerminationDate = src.TerminationDate,
      TerminatedReason = src.TerminatedReason,
      StudyRelatedSiteIdentifer = src.StudyRelatedSiteIdentifer,
      DisplayLabel = src.DisplayLabel,
      Status = src.Status,
      SiteRelatedProjectNumber = src.SiteRelatedProjectNumber,
      DedicatedSdrUrl = src.DedicatedSdrUrl,
      DedicatedVdrUrl = src.DedicatedVdrUrl,
      DedicatedBdrUrl = src.DedicatedBdrUrl,
    });

    internal static Expression<Func<SiteEntity, Site>> SiteSelector = ((SiteEntity src) => new Site {
      SiteUid = src.SiteUid,
      RepresentingInstituteUid = src.RepresentingInstituteUid,
      ResearchStudyUid = src.ResearchStudyUid,
      EnrollmentDate = src.EnrollmentDate,
      TerminationDate = src.TerminationDate,
      TerminatedReason = src.TerminatedReason,
      StudyRelatedSiteIdentifer = src.StudyRelatedSiteIdentifer,
      DisplayLabel = src.DisplayLabel,
      Status = src.Status,
      SiteRelatedProjectNumber = src.SiteRelatedProjectNumber,
      DedicatedSdrUrl = src.DedicatedSdrUrl,
      DedicatedVdrUrl = src.DedicatedVdrUrl,
      DedicatedBdrUrl = src.DedicatedBdrUrl,
    });

    internal void CopyContentFrom(Site source, Func<String, bool> onFixedValueChangingCallback = null) {
      this.SiteUid = source.SiteUid;
      this.RepresentingInstituteUid = source.RepresentingInstituteUid;
      this.ResearchStudyUid = source.ResearchStudyUid;
      this.EnrollmentDate = source.EnrollmentDate;
      this.TerminationDate = source.TerminationDate;
      this.TerminatedReason = source.TerminatedReason;
      this.StudyRelatedSiteIdentifer = source.StudyRelatedSiteIdentifer;
      this.DisplayLabel = source.DisplayLabel;
      this.Status = source.Status;
      this.SiteRelatedProjectNumber = source.SiteRelatedProjectNumber;
      this.DedicatedSdrUrl = source.DedicatedSdrUrl;
      this.DedicatedVdrUrl = source.DedicatedVdrUrl;
      this.DedicatedBdrUrl = source.DedicatedBdrUrl;
    }

    internal void CopyContentTo(Site target, Func<String, bool> onFixedValueChangingCallback = null) {
      target.SiteUid = this.SiteUid;
      target.RepresentingInstituteUid = this.RepresentingInstituteUid;
      target.ResearchStudyUid = this.ResearchStudyUid;
      target.EnrollmentDate = this.EnrollmentDate;
      target.TerminationDate = this.TerminationDate;
      target.TerminatedReason = this.TerminatedReason;
      target.StudyRelatedSiteIdentifer = this.StudyRelatedSiteIdentifer;
      target.DisplayLabel = this.DisplayLabel;
      target.Status = this.Status;
      target.SiteRelatedProjectNumber = this.SiteRelatedProjectNumber;
      target.DedicatedSdrUrl = this.DedicatedSdrUrl;
      target.DedicatedVdrUrl = this.DedicatedVdrUrl;
      target.DedicatedBdrUrl = this.DedicatedBdrUrl;
    }

    #endregion

  }

  public class InvolvedPersonEntity {

    /// <summary> An <see href="https://de.wikipedia.org/wiki/Universally_Unique_Identifier">Universally Unique Identifier</see> which can be generated by any origin system and is used to address this ORSCF conform data record in decentralized environments. Note that this Identity must not be changed any more! </summary>
    [Required]
    public Guid InvolvedPersonUid { get; set; } = Guid.NewGuid();

    /// <summary> *this field is optional (use null as value) </summary>
    public String DisplayLabel { get; set; }

    /// <summary> *this field is optional </summary>
    public Nullable<Guid> EmailAddress { get; set; }

    [Required]
    public Boolean IsArchived { get; set; }

    [Referrer]
    public virtual ObservableCollection<InvolvementRoleEntity> InvolvementRoles { get; set; } = new ObservableCollection<InvolvementRoleEntity>();

    #region Mapping

    internal static Expression<Func<InvolvedPerson, InvolvedPersonEntity>> InvolvedPersonEntitySelector = ((InvolvedPerson src) => new InvolvedPersonEntity {
      InvolvedPersonUid = src.InvolvedPersonUid,
      DisplayLabel = src.DisplayLabel,
      EmailAddress = src.EmailAddress,
      IsArchived = src.IsArchived,
    });

    internal static Expression<Func<InvolvedPersonEntity, InvolvedPerson>> InvolvedPersonSelector = ((InvolvedPersonEntity src) => new InvolvedPerson {
      InvolvedPersonUid = src.InvolvedPersonUid,
      DisplayLabel = src.DisplayLabel,
      EmailAddress = src.EmailAddress,
      IsArchived = src.IsArchived,
    });

    internal void CopyContentFrom(InvolvedPerson source, Func<String, bool> onFixedValueChangingCallback = null) {
      this.InvolvedPersonUid = source.InvolvedPersonUid;
      this.DisplayLabel = source.DisplayLabel;
      this.EmailAddress = source.EmailAddress;
      this.IsArchived = source.IsArchived;
    }

    internal void CopyContentTo(InvolvedPerson target, Func<String, bool> onFixedValueChangingCallback = null) {
      target.InvolvedPersonUid = this.InvolvedPersonUid;
      target.DisplayLabel = this.DisplayLabel;
      target.EmailAddress = this.EmailAddress;
      target.IsArchived = this.IsArchived;
    }

    #endregion

  }

  public class InvolvementRoleEntity {

    /// <summary> An <see href="https://de.wikipedia.org/wiki/Universally_Unique_Identifier">Universally Unique Identifier</see> which can be generated by any origin system and is used to address this ORSCF conform data record in decentralized environments. Note that this Identity must not be changed any more! </summary>
    [Required]
    public Guid InvolvedPersonRoleUid { get; set; } = Guid.NewGuid();

    [Required]
    public Guid ResearchStudyUid { get; set; }

    /// <summary> *this field is optional (use null as value) </summary>
    public String Role { get; set; }

    /// <summary> *this field is optional </summary>
    public Nullable<DateTime> InvolvedFrom { get; set; }

    /// <summary> *this field is optional </summary>
    public Nullable<DateTime> InvolvedUntil { get; set; }

    /// <summary> null indicated a site independent global role *this field is optional </summary>
    public Nullable<Guid> DedicatedToSiteUid { get; set; }

    [Required]
    public Guid InvolvedPersonUid { get; set; }

    [Lookup]
    public virtual InvolvedPersonEntity InvolvedPerson { get; set; }

    [Principal]
    public virtual ResearchStudyEntity ResearchStudy { get; set; }

    [Lookup]
    public virtual SiteEntity DedicatedToSite { get; set; }

    #region Mapping

    internal static Expression<Func<InvolvementRole, InvolvementRoleEntity>> InvolvementRoleEntitySelector = ((InvolvementRole src) => new InvolvementRoleEntity {
      InvolvedPersonRoleUid = src.InvolvedPersonRoleUid,
      ResearchStudyUid = src.ResearchStudyUid,
      Role = src.Role,
      InvolvedFrom = src.InvolvedFrom,
      InvolvedUntil = src.InvolvedUntil,
      DedicatedToSiteUid = src.DedicatedToSiteUid,
      InvolvedPersonUid = src.InvolvedPersonUid,
    });

    internal static Expression<Func<InvolvementRoleEntity, InvolvementRole>> InvolvementRoleSelector = ((InvolvementRoleEntity src) => new InvolvementRole {
      InvolvedPersonRoleUid = src.InvolvedPersonRoleUid,
      ResearchStudyUid = src.ResearchStudyUid,
      Role = src.Role,
      InvolvedFrom = src.InvolvedFrom,
      InvolvedUntil = src.InvolvedUntil,
      DedicatedToSiteUid = src.DedicatedToSiteUid,
      InvolvedPersonUid = src.InvolvedPersonUid,
    });

    internal void CopyContentFrom(InvolvementRole source, Func<String, bool> onFixedValueChangingCallback = null) {
      this.InvolvedPersonRoleUid = source.InvolvedPersonRoleUid;
      this.ResearchStudyUid = source.ResearchStudyUid;
      this.Role = source.Role;
      this.InvolvedFrom = source.InvolvedFrom;
      this.InvolvedUntil = source.InvolvedUntil;
      this.DedicatedToSiteUid = source.DedicatedToSiteUid;
      this.InvolvedPersonUid = source.InvolvedPersonUid;
    }

    internal void CopyContentTo(InvolvementRole target, Func<String, bool> onFixedValueChangingCallback = null) {
      target.InvolvedPersonRoleUid = this.InvolvedPersonRoleUid;
      target.ResearchStudyUid = this.ResearchStudyUid;
      target.Role = this.Role;
      target.InvolvedFrom = this.InvolvedFrom;
      target.InvolvedUntil = this.InvolvedUntil;
      target.DedicatedToSiteUid = this.DedicatedToSiteUid;
      target.InvolvedPersonUid = this.InvolvedPersonUid;
    }

    #endregion

  }

}
