// <auto-generated />
using System;
using MedicalResearch.StudyManagement.Persistence.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MedicalResearch.StudyManagement.Migrations
{
    [DbContext(typeof(StudyManagementDbContext))]
    [Migration("20240927102842_V003")]
    partial class V003
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MedicalResearch.StudyManagement.Persistence.DataEndpointEntity", b =>
                {
                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EndpointType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OAuthUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OwnerInstituteUid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("PublicResolvable")
                        .HasColumnType("bit");

                    b.HasKey("Url");

                    b.HasIndex("OwnerInstituteUid");

                    b.ToTable("SmsDataEndpoints", (string)null);
                });

            modelBuilder.Entity("MedicalResearch.StudyManagement.Persistence.InstitueRelatedOAuthConfigEntity", b =>
                {
                    b.Property<Guid>("InstituteUid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DataEndpointUrl")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OAuthClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OAuthClientSecret")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OAuthScopesRequired")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InstituteUid", "DataEndpointUrl");

                    b.HasIndex("DataEndpointUrl");

                    b.ToTable("SmsInstitueRelatedOAuthConfigs", (string)null);
                });

            modelBuilder.Entity("MedicalResearch.StudyManagement.Persistence.InstituteEntity", b =>
                {
                    b.Property<Guid>("InstituteUid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DisplayLabel")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<string>("PrivateBdrUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrivateSdrUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrivateVdrUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrivateWdrUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InstituteUid");

                    b.ToTable("SmsInstitutes", (string)null);
                });

            modelBuilder.Entity("MedicalResearch.StudyManagement.Persistence.InvolvedPersonEntity", b =>
                {
                    b.Property<Guid>("InvolvedPersonUid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DisplayLabel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("EmailAddress")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.HasKey("InvolvedPersonUid");

                    b.ToTable("SmsInvolvedPersons", (string)null);
                });

            modelBuilder.Entity("MedicalResearch.StudyManagement.Persistence.InvolvementRoleEntity", b =>
                {
                    b.Property<Guid>("InvolvedPersonRoleUid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DedicatedToSiteUid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("InvolvedFrom")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("InvolvedPersonUid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("InvolvedUntil")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ResearchStudyUid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InvolvedPersonRoleUid");

                    b.HasIndex("DedicatedToSiteUid");

                    b.HasIndex("InvolvedPersonUid");

                    b.HasIndex("ResearchStudyUid");

                    b.ToTable("SmsInvolvementRoles", (string)null);
                });

            modelBuilder.Entity("MedicalResearch.StudyManagement.Persistence.ResearchStudyEntity", b =>
                {
                    b.Property<Guid>("ResearchStudyUid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BdrUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayLabel")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ImsUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("InitiatorInstituteUid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InitiatorRelatedProjectNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<string>("Phase")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SdrUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudyWorkflowName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudyWorkflowVersion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubjectIdentifierTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TerminatedReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TerminationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("VdrUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WdrUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ResearchStudyUid");

                    b.HasIndex("InitiatorInstituteUid");

                    b.ToTable("SmsResearchStudies", (string)null);
                });

            modelBuilder.Entity("MedicalResearch.StudyManagement.Persistence.SiteEntity", b =>
                {
                    b.Property<Guid>("SiteUid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DedicatedBdrUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DedicatedSdrUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DedicatedVdrUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayLabel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EnrollmentDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RepresentingInstituteUid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResearchStudyUid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SiteRelatedProjectNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudyRelatedSiteIdentifer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TerminatedReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TerminationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("SiteUid");

                    b.HasIndex("RepresentingInstituteUid");

                    b.HasIndex("ResearchStudyUid");

                    b.ToTable("SmsSites", (string)null);
                });

            modelBuilder.Entity("MedicalResearch.StudyManagement.Persistence.DataEndpointEntity", b =>
                {
                    b.HasOne("MedicalResearch.StudyManagement.Persistence.InstituteEntity", "OwnerInstitute")
                        .WithMany("OwnedDataEndpoints")
                        .HasForeignKey("OwnerInstituteUid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OwnerInstitute");
                });

            modelBuilder.Entity("MedicalResearch.StudyManagement.Persistence.InstitueRelatedOAuthConfigEntity", b =>
                {
                    b.HasOne("MedicalResearch.StudyManagement.Persistence.DataEndpointEntity", "ForEndpoint")
                        .WithMany()
                        .HasForeignKey("DataEndpointUrl")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MedicalResearch.StudyManagement.Persistence.InstituteEntity", "ForInstitute")
                        .WithMany("OAuthConfigs")
                        .HasForeignKey("InstituteUid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ForEndpoint");

                    b.Navigation("ForInstitute");
                });

            modelBuilder.Entity("MedicalResearch.StudyManagement.Persistence.InvolvementRoleEntity", b =>
                {
                    b.HasOne("MedicalResearch.StudyManagement.Persistence.SiteEntity", "DedicatedToSite")
                        .WithMany("SiteDedicatedInvolvementRoles")
                        .HasForeignKey("DedicatedToSiteUid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MedicalResearch.StudyManagement.Persistence.InvolvedPersonEntity", "InvolvedPerson")
                        .WithMany("InvolvementRoles")
                        .HasForeignKey("InvolvedPersonUid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MedicalResearch.StudyManagement.Persistence.ResearchStudyEntity", "ResearchStudy")
                        .WithMany("InvolvementRoles")
                        .HasForeignKey("ResearchStudyUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DedicatedToSite");

                    b.Navigation("InvolvedPerson");

                    b.Navigation("ResearchStudy");
                });

            modelBuilder.Entity("MedicalResearch.StudyManagement.Persistence.ResearchStudyEntity", b =>
                {
                    b.HasOne("MedicalResearch.StudyManagement.Persistence.InstituteEntity", "InitiatorInstitute")
                        .WithMany("InitiatedStudies")
                        .HasForeignKey("InitiatorInstituteUid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("InitiatorInstitute");
                });

            modelBuilder.Entity("MedicalResearch.StudyManagement.Persistence.SiteEntity", b =>
                {
                    b.HasOne("MedicalResearch.StudyManagement.Persistence.InstituteEntity", "RepresentingInstitute")
                        .WithMany("RepresentedSites")
                        .HasForeignKey("RepresentingInstituteUid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MedicalResearch.StudyManagement.Persistence.ResearchStudyEntity", "Study")
                        .WithMany("Sites")
                        .HasForeignKey("ResearchStudyUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RepresentingInstitute");

                    b.Navigation("Study");
                });

            modelBuilder.Entity("MedicalResearch.StudyManagement.Persistence.InstituteEntity", b =>
                {
                    b.Navigation("InitiatedStudies");

                    b.Navigation("OAuthConfigs");

                    b.Navigation("OwnedDataEndpoints");

                    b.Navigation("RepresentedSites");
                });

            modelBuilder.Entity("MedicalResearch.StudyManagement.Persistence.InvolvedPersonEntity", b =>
                {
                    b.Navigation("InvolvementRoles");
                });

            modelBuilder.Entity("MedicalResearch.StudyManagement.Persistence.ResearchStudyEntity", b =>
                {
                    b.Navigation("InvolvementRoles");

                    b.Navigation("Sites");
                });

            modelBuilder.Entity("MedicalResearch.StudyManagement.Persistence.SiteEntity", b =>
                {
                    b.Navigation("SiteDedicatedInvolvementRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
